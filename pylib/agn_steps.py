from data_setup import *

show("""# Observation of discrete steps in gamma-ray light curves""")
show_date()
dark_theme = set_theme(['dark'])

show(f"""## Load light curve data
     Note that the file `{Path(VarDB.info_file).name}`, used here was copied from SLAC's s3df,
     where is was last updated on May 10 2023 13:05. 
     It can be found at `/sdf/home/b/burnett/work/bb_light_curves/files`.
     """)
vdb = VarDB().load_cats().matchup()   
dfx = vdb.dfx
lcs = [vdb[uw_name]['light_curve'] for uw_name in dfx.uw_name]

show("""### Detect the single-steppers
Here I select BB light curves with exactly two blocks, and record the ratio
of the two levels (the steps), and the position of the transition.
The light curves were generated with a bin width of 7 days, so the "step" position
must be at a bin boundary, the boundary position depending on the BB algorithm, its uncertainty TBD.
Ratios close to 1.0 are possibly an artifact of the BB procedure, this needs study.
""")


margin=50
def select_single_step(dfx, margin=margin):
    ass = dfx.association.values
    tss = dfx.ts.values
    names = dfx.index
    
    dd = dict()
    for name, lc, stype, ts in zip(names, lcs, ass, tss):
        if lc is None or len(lc)!=2: continue
        v = lc.tw.values/7
        a,b = lc.flux.values[:,0]
        if (a*b>0) & (v[0]>=margin) & (v[1]>=margin):
            dd[name] = dict(flux_ratio=b/a, time=v[0], t2=v[1],
                            ts=ts, association=stype)
    df = pd.DataFrame.from_dict(dd, orient='index') 
    df.loc[:,'eflux'] = dfx.loc[df.index, 'eflux100']
    return df
    
df = select_single_step(dfx)

show(f"""Apply margin={margin} weeks: <br>Found {len(df)} candidates, with the association categories""") 

v,n = np.unique(df.association,  return_counts=True)
show(pd.Series(dict(list(zip(v,n))), name=''))

def ratio_display(df,  ax=None):
    
    eflux = df.eflux
    # sns.set_theme(font_scale=1.2)
    fig, ax = plt.subplots(figsize = (12,10)) if ax is None else (ax.figure, ax)
    r = df.flux_ratio
    
    sns.scatterplot(df, ax=ax, y=np.log10(r).clip(-1,1), 
                    x='time', hue='association',
                    size=np.log10(eflux), sizes=(10, 150),
                )
    ax.set(xlim=(-50,800), xlabel='Step time (Fermi week)', 
        ylabel='Flux Ratio (log scale)')
    ax.axhline(0, color="0.3", ls=':' )
    ticks = np.log10(np.array([1/8,1/4, 1/2, 1, 2, 4,8]))
    ax.set( yticks=ticks, yticklabels='1/8 1/4 1/2 1 2 4 8'.split())
    ax.legend(loc='upper left', fontsize=12,)
    return fig



def ratio_vs_time(df, week_lim=None, fignum=1):

    show(f"""## Steps: ratio vs. time for blazars""")

    fig, ax = plt.subplots(figsize = (12,10))
    keep = df.association.apply(lambda a: a in 'bll fsrq bcu'.split())
    r = df[keep].flux_ratio
    ratio_display(df[keep], ax=ax)
    ax.plot(420, np.log10(2.60) ,'*',color='crimson', ms=40, label='PKS J2333-2343')
    
    show(fig, fignum=fignum, caption=
             """The after/before ratio of the apparent step in the flux, vs its time in Fermi weeks. 
             Colors correspond to the 4FGL-DR4 association assignment, and marker size to the energy flux.
             """)

    prop = lambda t: f'{100* sum(df.association==t)/ sum(dfx.association==t):.0f} %'

    show(f"""Notes:
    * The star is the location, after correction for a nearby blazar, of PKS J2333-2343. Because of that, it was not included.
    * There is a higher proportion of BL Lacs ({prop('bll')}) than FSRQs ({prop('fsrq')})).
    * There are more steps-up ({sum(r>1)}) than steps-down ({sum(r<1)}), and the up-steps concentrate, with higher flux ratios, at the end,
    while the fewer down-steps are similarly concentrated at the start. These can be explained by the hypothesis that we are seeing transitions 
    between discrete states, and the time spent in a higher state is less then the lower one. 
    """)

def pulsar_only(fignum=2):
    show(f"""## Study the pulsar set to understand BB-induced background
    We will compare this dataset with those for the other association categories.

    """)
    plt.style.use('dark_background')
    psr = df.query('association=="psr"')
    show( ratio_display(psr), fignum=fignum) 

def block_2_1(fignum=3):
    show(f"""## Compare numbers of 2-block with 1
    There are two reasons for 2-BB light curves to be 
    related to the 1-BB ones.
    1) Background: It is a false positive generated by the
    BB algorithm. (We need to examine this possibility with a MC.)
    2) Science: The source must have been quiet for at least 8 years, compared with 15 for 
    the 1-block set. The rates must be part of same variability spectrum.
    
    Here are the total numbers, for each of our six 
    association classes:
    """)
    def get_unique(sclass, name=''):
        v,n = np.unique(sclass,  return_counts=True)
        df= pd.DataFrame.from_dict(
                dict(list(zip(v,n))), orient='index',
            )
        return df.rename(columns={0:name})
         
    ones, twos = dfx.query('nbb==1').copy(), dfx.query('nbb==2').copy()
    nbb1 = get_unique(ones.association, 'nbb=1')
    nbb2 = get_unique(twos.association, 'nbb=2')
    
    nbbstats = pd.concat([nbb1,nbb2], axis=1, )
    nbbstats.loc[:,'ratio'] = nbbstats.iloc[:,1]/nbbstats.iloc[:,0]
    show(nbbstats)
    
    show(""" The distributions of the sizes of the steps.
    The pulsar one should only reflect reason 1.""")
    
    import warnings
    warnings.simplefilter("ignore", FutureWarning)
    df.loc[:,'log_ratio'] = np.log10(df.flux_ratio)
    sns.displot(df, x='log_ratio',  bins=np.linspace(-1,1,41),
                weights= 1/nbb1.loc[df.association].values.T[0],
                col='association',  col_wrap=3, 
                col_order='bll fsrq bcu psr unid other'.split(),
                height=2.5, aspect=1.5,
                element='step', fill=False
    
               )
    for ax in plt.gcf().axes:
        ax.set( xlabel='Flux ratio (log scale)', ylabel='Scaled counts') #, yscale='log')
        ax.axvline(0, color="0.7" , )
        ticks = np.log10(np.array([1/8,1/4, 1/2, 1, 2, 4,8]))
    ax.set(xlim=(-1.1,1.1),xticks=ticks, xticklabels='1/8 1/4 1/2 1 2 4 8'.split());
    show(ax.figure, fignum=fignum,
         caption="""Flux ratio histograms for each association 
    category. Counts are scaled by the inverse of the number of sources with nbb=1,
    so the total represents the fraction of nbb=2 to nbb=1. The pulsars are then 
    an estimate of the contribution of false positives to be applied to the others.
    """)
    show(f"""Notes:
    * The range of the pulsar step sizes is 
    mostly limited to be less than 2.
    * If the apparent pulsar steps are all spurious, its dristribution
    above shouid be a component of all the others. This does not
    appear to be the case, especially for the unid's.
    * The asymmetry between up- and down-steps is dramatically
    different. It appears from this that the bcu's are 
    BL Lacs, and a large proportion of the unid's are as well.
    
    """)
